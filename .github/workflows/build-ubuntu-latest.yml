name: build ubuntu latest

on:
  pull_request:
    branches:
      - master
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install dependencies
        run: "sudo apt-get update && sudo apt-get install
              libflac-dev libflac++-dev libpulse-dev zlib1g-dev libssl-dev libdbus-1-dev"
      - name: Cache Qt
        id: cache-qt
        uses: actions/cache@v1
        with:
          path: ../Qt/5.15.2/gcc_64
          key: ${{ runner.os }}-QtCache-5152-gcc_64
      - name: Install Qt
        uses: jurplel/install-qt-action@v2
        with:
          version: '5.15.2'
          host: 'linux'
          target: 'desktop'
          modules: ''
          install-deps: 'true'
          cached: ${{ steps.cache-qt.outputs.cache-hit }}
      - name: Dump Qt DIR
        run:  echo ${Qt5_DIR}
      - name: Init submodules
        run: git submodule init && git submodule update
      - name: Configure build
        run: "cmake -B build
                    -DCMAKE_PREFIX_PATH=${Qt5_DIR}
                    -DQt5_DIR=${Qt5_DIR}/lib/cmake/Qt5
                    -DQt5Core_DIR=${Qt5_DIR}/lib/cmake/Qt5Core
                    -DQt5Gui_DIR=${Qt5_DIR}/lib/cmake/Qt5Gui
                    -DQt5Qml_DIR=${Qt5_DIR}/lib/cmake/Qt5Qml
                    -DQt5Network_DIR=${Qt5_DIR}/lib/cmake/Qt5Network
                    -DQt5Quick_DIR=${Qt5_DIR}/lib/cmake/Qt5Quick
                    -DQt5QuickControls2_DIR=${Qt5_DIR}/lib/cmake/Qt5QuickControls2
                    -DQt5Xml_DIR=${Qt5_DIR}/lib/cmake/Qt5Xml
                    -DQt5Svg_DIR=${Qt5_DIR}/lib/cmake/Qt5Svg
                    -DQt5Widgets_DIR=${Qt5_DIR}/lib/cmake/Qt5Widgets
                    -DQt5QmlModels_DIR=${Qt5_DIR}/lib/cmake/Qt5QmlModels
                    -Wno-dev"
      - name: Build
        run:  cmake --build build

  release:
    name: Release Linux Package
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Get Time
        id: time
        uses: nanzm/get-time-action@v1.1
        with:
          timeZone: 1
          format: 'YYYY-MM-DD-HH-mm-ss'    
      - name: Download APK from build
        uses: actions/download-artifact@v1
        with:
          name: apk
      - name: list directory output
        run: ls /home/runner/work/noson-app/noson-app/apk
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
        with:
          tag_name: ${{ steps.time.outputs.time }}
          release_name: Release Ubuntu Latest Package ${{ steps.time.outputs.time }} 
      - name: Upload Release APK
        id: upload_release_asset
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: /home/runner/work/noson-app/noson-app/apk/noson-gui-arm64-v8a-debug.apk
          asset_name: noson-gui-arm64-v8a-debug.apk # noson-gui-arm64-v8a-debug.apk
          asset_content_type: application/zip
